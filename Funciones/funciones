const nodemailer = require('nodemailer');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const { connection, conectar } = require('../conexion/conection');


const transporter = nodemailer.createTransport({
    host: "smtp.office365.com",
    port: 587,
    secure: false,
    proxy: process.env.http_proxy,
    auth: {
        user: "servicioextendido@canvia.com",
        pass: "Cambio#2025",
        sendImmediately: true,
    }
});

async function enviarCorreo(destinatario, asunto, contenido, cc) {
    const info = await transporter.sendMail({
        from: "servicioextendido@canvia.com",
        to: destinatario,
        cc: cc,
        subject: asunto,
        html: contenido,
        attachments: [
            {
                filename: 'logo_canvia.png',
                path: './src/logo_canvia.png',
                cid: 'logo'
            }
        ]
    });
    console.log("Message sent: %s", info.messageId);
};
const firma = `
                </table>
                <br/>
                <p>Saludos Cordiales.</p>
                <p>servicioextendido@canvia.com – www.canvia.com<p>
                <p>Jirón Chota 998, Cercado de Lima<p>
                </tbody>
                <img src="cid:logo" />
                `;

const generarTablaRelevos = (relevos) => {
    let tabla = `
                    <p>Se envían los tickets que se han relevado durante el turno:</p>
                    <table style="border-collapse: collapse; max-width: 600px; width: 100%;">
                      <colgroup>
                        <col style="width: 2%;">
                        <col style="width: 20%;">
                        <col style="width: 30%;">
                        <col style="width: 40%;">
                      </colgroup>
                      <thead>
                        <tr>
                          <th style="border: 1px solid #ddd; padding: 8px;">Fecha</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">Ticket</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">Especialista</th>
                          <th style="border: 1px solid #ddd; padding: 8px;">Resumen de Ticket</th>
                        </tr>
                      </thead>
                      <tbody>
                  `;

    relevos.forEach((relevo) => {
        const fecha = new Date(relevo.fecha).toLocaleString();
        tabla += `
                                    <tr>
                                        <td style="border: 1px solid #ddd; padding: 8px;">${fecha}</td>
                                        <td style="border: 1px solid #ddd; padding: 8px;">${relevo.ticket}</td>
                                        <td style="border: 1px solid #ddd; padding: 8px;">${relevo.Especialista}</td>
                                        <td style="border: 1px solid #ddd; padding: 8px;">${relevo.Resumen}</td>
                                    </tr>
                                    `;
    });

    tabla += firma;

    return tabla;
};

const dias = [
    'domingo',
    'lunes',
    'martes',
    'miércoles',
    'jueves',
    'viernes',
    'sábado',
];

const enviarProyecto = (proyecto) => {
    const FechaActual = new Date();
    const dia = dias[FechaActual.getDay()];
    let hora = proyecto.desde;
    const diaActual = FechaActual.getDate();
    let diaAnterior = diaActual - 1;
    const meses = ["1", "3", "5", "7", "8", "10", "12"];
    const mes = FechaActual.toLocaleString('default', { month: 'long' });
    let mesN = FechaActual.toLocaleString('default', { month: 'numeric' });
    const anio = FechaActual.getFullYear();


    if (diaAnterior == 0) {
        mesN -= 1;
        if (meses.includes(mes)) diaAnterior = 31;
        else if (mesN == 2) diaAnterior = 28;
        else diaAnterior = 30
    }
    let asunto = `SD SE: Check List del Servicio SD ${proyecto.nombre} del ${diaAnterior} de ${mes} al ${diaActual} de ${mes} del ${anio}`;


    if (proyecto.nombre === "CANVIA") {
        if (dia === "sábado" || dia === "domingo") {
            const fin = "sabado y domingo no se envian correos";
            console.log(fin);
            return fin;
        } else if (dia == "lunes") {
            diaAnterior -= 2;
        }
    }
    if (proyecto.nombre === "UNIQUE") {
        if (dia === "sábado" || dia === "domingo") {
            const fin = "sabado y domingo no se envian correos";
            console.log(fin);
            return fin;
        } else if (dia == "lunes") {
            diaAnterior -= 2;
        }
    }

    if (proyecto.nombre === "VOLCAN") {
        if (dia === "sábado" || dia === "domingo") {
            const fin = "sábado ni domingo se envían correos";
            console.log(fin);
            return fin;
        } else if (dia === "lunes") {
            diaAnterior -= 2;
        }
    }

    let query = `SELECT * FROM relevos WHERE fecha>="${anio}-${mesN}-${diaAnterior} ${hora}"`;

    if (proyecto.nombre === "HABITAT") {
        if (dia === 'sábado' || dia === 'domingo') {
            query = `SELECT * FROM relevos WHERE fecha>="${anio}-${mesN}-${diaActual} ${hora}"`;
            asunto = `SD SE: Check List del Servicio SD ${proyecto.nombre} del ${diaActual} de ${mes} del ${anio}`
        } else {
            const fin = "solo sábado y domingo se envían correos";
            console.log(fin);
            return fin;
        }
    }

    connection.query(query, async (error, results) => {
        if (error) {
            console.error('Error en la consulta', error);
        } else {
            // Crear un objeto para almacenar los relevos filtrados por proyecto
            const relevosPorProyecto = {};
            // Inicializar el objeto con todos los proyectos
            relevosPorProyecto[proyecto.nombre] = [];
            // Agrupar los relevos por proyecto
            for (const result of results) {
                if (result.proyecto in relevosPorProyecto) {
                    relevosPorProyecto[result.proyecto].push(result);
                }
            }

            const relevosFiltrados = relevosPorProyecto[proyecto.nombre];

            if (relevosFiltrados.length === 0) {
                // No hay relevos para el proyecto, enviar mensaje predeterminado
                const contenidoProyecto = "Estimados,<br/>Buenos días, no se registraron eventos hasta el cierre de turno de madrugada." + firma;
                try {
                    await enviarCorreo(proyecto.destinatario, asunto, contenidoProyecto, proyecto.cc);
                    console.log(`Correo a ${proyecto.nombre} enviado exitosamente`);
                } catch (error) {
                    console.error(`Error al enviar el correo a ${proyecto.nombre}`, error);
                }
            } else {
                // Hay relevos para el proyecto, generar contenido del proyecto
                const contenidoProyecto = generarTablaRelevos(relevosFiltrados);
                try {
                    await enviarCorreo(proyecto.destinatario, asunto, contenidoProyecto, proyecto.cc);
                    console.log(`Correo a ${proyecto.nombre} enviado exitosamente`);
                } catch (error) {
                    console.error(`Error al enviar el correo a ${proyecto.nombre}`, error);
                }
            }
        }
    });
};
const verificarSesion = (req, res, next) => {
    const token = req.headers.authorization;
    if (!token) res.status(401).json({ error: 'Acceso no autorizado' });
    try {
        const { usuarioId } = jwt.verify(token, 'secreto');
        req.user = { id: usuarioId };
        next();
    } catch (error) {
        console.error("Error al verificar sesion: ", error);
        res.status(401).json({ error: 'Acceso no autorizado' });
    }

};

async function obtenerNombreUsuario(id) {
    return new Promise((resolve, reject) => {
        connection.query(`SELECT nombres,correo FROM usuarios WHERE id = ${id}`, (error, results) => {
            if (error) {
                reject(error);
            } else {
                resolve({
                    nombres: results[0]?.nombres || '',
                    correo: results[0]?.correo || ''
                });
            }
        });
    });
}

function guardarAudio(file) {
    const newpath = `./src/${file.originalname}`;
    fs.renameSync(file.path, newpath);
    return newpath;
}

const enviarCompromiso = async (destinatario, asunto, contenido, cc, filename) => {
    const ubicacion = './src/' + filename;
    const info = await transporter.sendMail({
        from: "servicioextendido@canvia.com",
        to: destinatario,
        cc: cc,
        subject: asunto,
        html: contenido,
        attachments: [
            {
                filename: filename,
                path: ubicacion,
            }
        ]
    });
    console.log("Message sent: %s", info.messageId);
}



module.exports = { enviarProyecto, verificarSesion, enviarCompromiso, guardarAudio, obtenerNombreUsuario };